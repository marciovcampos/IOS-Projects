import UIKit
import Foundation

struct Point{
    // (x, y)
    let x: Double
    let y: Double
    
    // metodo para calculo de distancia entre dois pontos
    func distance(from point: Point) -> Double {
        return sqrt(Double(pow(point.x - self.x, 2) + pow(point.y - self.y, 2))).roundTo(places: 2)
    }
}

struct Triangule{
    //(vertex1, vertex2, vertex3 stored properties
    // kind -> Enumerador (equilateral, isoceles, scalene)
    enum Kind{
        case equilateral
        case isosceles
        case scalene
    }
    
    let vertex1: Point
    let vertex2: Point
    let vertex3: Point
    
    var kind: Kind{
        //calcula a distancia entre AB, AC e BC
        //compara o tamanho dos lados
        //retorna o tipo  .equilatero .isosceles .escaleno
        let distanciaAB : Double = abs(vertex1.distance(from: vertex2))
        let distanciaAC : Double = abs(vertex1.distance(from: vertex3))
        let distanciaBC : Double = abs(vertex2.distance(from: vertex3))
        
        if(distanciaAB == distanciaAC && distanciaAC == distanciaBC && distanciaAB == distanciaBC){
            return .equilateral
        }else if(distanciaAB != distanciaAC && distanciaAC != distanciaBC && distanciaAB != distanciaBC) {
            return .scalene
        }else{
            return .isosceles
        }
        
    }
}

extension Double{
    func roundTo(places: Int) -> Double{
        let divisor = pow(10.0, Double (places))
        return (self * divisor).rounded() / divisor
    }
}

var triangule1 = Triangule(vertex1: Point(x: 2, y: 7), vertex2: Point(x: 2, y: 3), vertex3: Point(x: 5, y: 3)).kind
var triangule2 = Triangule(vertex1: Point(x: 2, y: 3), vertex2: Point(x: 2, y: 1), vertex3: Point(x: 4, y: 1)).kind
var triangule3 = Triangule(vertex1: Point(x: 5, y: 7), vertex2: Point(x: 10, y: 9), vertex3: Point(x: 5.768, y: 12.33)).kind

//A(2,7) B(2, 3) C(5, 3)  //escaleno
//A(2, 3) B(2, 1) C(4, 1) //isoceles
//A(5, 7) B(10, 9) C(5.768, 12,33) //equilatero

print ("triangule1: \(triangule1)")
print ("triangule2: \(triangule2)")
print ("triangule3: \(triangule3)")




