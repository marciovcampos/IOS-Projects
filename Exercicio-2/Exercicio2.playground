import UIKit
import Foundation

enum BankOperation{
    case withdrawl(value: Double)
    case deposit(from: String, value: Double)
}

protocol BankAccountProtocol{
    
    // Initializers
    init(number: String, holder: String)
    
    // Properties
    var balance: Double { get }
    var statement: [BankOperation] { get }
    
    // Methods
    func withdrawl(value: Double) throws
    func deposit(value: Double, from account: String)
    func formattedStatement() -> String
}

enum BankAccountError: Error {
    case insuficientFunds(currentBalance: Double)
}

class MyBank: BankAccountProtocol {
    private let number: String
    private let holder: String
    private(set) var balance: Double
    private(set) var statement: [BankOperation]
    
    required init(number: String, holder: String){
        self.number = number
        self.holder = holder
        self.balance = 0.0
        self.statement = []
    }
    
    func withdrawl(value: Double) throws {
        guard balance >= value else { throw BankAccountError.insuficientFunds(currentBalance: self.balance)}
        
        balance = balance - value;
        statement.append(.withdrawl(value: value))
    }
    
    func deposit(value: Double, from account: String) {
        balance = balance + value;
        statement.append(.deposit(from: account, value: value))
    }
    
    func formattedStatement() -> String {
        var result = "ACCOUNT STATEMENT \n \(number) - \(holder)\n\n"
        for register in statement{
            switch register {
            case .deposit(let from, let value):
                result += ("DEP  \(value)   \(from)\n")
            case .withdrawl(let value):
                result += ("WTD  \(value)\n")
            }
        }
        return result;
    }
   
}

//test
let joaoAccount = MyBank(number: "9999", holder: "Joao")

joaoAccount.deposit(value: 500, from: "0033")

joaoAccount.deposit(value: 300, from: "0066")

do {
    try joaoAccount.withdrawl(value: 650)
}catch BankAccountError.insuficientFunds {
    print ("Insufficient funds!\n")
}

do {
    try joaoAccount.withdrawl(value: 490)
}catch BankAccountError.insuficientFunds {
    print ("Insufficient funds!\n")
}

joaoAccount.deposit(value: 1200, from: "0099")

print(joaoAccount.formattedStatement())
